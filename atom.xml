<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haley</title>
  
  <subtitle>Blog,博客,分享,开源,心得</subtitle>
  <link href="http://www.haleyl.com/atom.xml" rel="self"/>
  
  <link href="http://www.haleyl.com/"/>
  <updated>2020-11-04T06:38:22.717Z</updated>
  <id>http://www.haleyl.com/</id>
  
  <author>
    <name>子恒|Haley</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库优化之结构设计</title>
    <link href="http://www.haleyl.com/2017/03/03/mysql/mysql-struct/"/>
    <id>http://www.haleyl.com/2017/03/03/mysql/mysql-struct/</id>
    <published>2017-03-03T10:24:35.000Z</published>
    <updated>2020-11-04T06:38:22.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计好处"><a href="#设计好处" class="headerlink" title="设计好处"></a>设计好处</h2><ul><li>良好的数据库逻辑设计和物理设计师数据库获得高性能的基础</li><li>范式化设计和反范式化设计（减少冗余、减少异常、让数据组织的更加和谐）</li><li>优化目的<ul><li>减少数据冗余（尽量）</li><li>尽量避免数据维护中出现更新、插入和删除等异常<ul><li>插入：如果表中的某个实体随着另一个实体而存在</li><li>更新：如果更改表中的某个实体的单独属性时，需要对多表进行更新</li><li>删除：如果删除表中的某一时则会导致其他实体的消失</li></ul></li></ul></li></ul><hr><h2 id="设计过程"><a href="#设计过程" class="headerlink" title="设计过程"></a>设计过程</h2><ul><li>需求分析<ul><li>全面了解产品设计的需求    </li><li>存储需求（比如一对多，多对一等）</li><li>数据处理需求</li><li>数据的安全性和完整性</li></ul></li><li>逻辑分析<ul><li>设计数据的逻辑存储结构</li><li>数据实体之前的逻辑关系，解决数据冗余和数据维护异常 </li></ul></li><li>物理设计<ul><li>根据所使用数据特点设计表结构</li></ul></li><li>维护优化<ul><li>对索引、存储结构等进行优化 </li></ul></li><li>范式化<ul><li> 设计没有数据冗余和数据维护异常的数据库结构</li></ul></li><li>反范式化<ul><li> 针对范式化而言的，在前面介绍了数据库设计的范式，所谓的反范式化就是为了性能和读取效率的考虑而适当的对数据库设计范式的要求进行违法，而允许存在少量的数据冗余，换句话来说反范式化就是使用空间来换取时间</li></ul></li></ul><blockquote><p>本篇重点解释物理设计、范式化与反范式化化各自优缺点；其他将在文章《数据库优化》系列一一讲明；</p></blockquote><hr><h2 id="范式化与反范式化"><a href="#范式化与反范式化" class="headerlink" title="范式化与反范式化"></a>范式化与反范式化</h2><ul><li>范式化设计的优缺点<ul><li>优点<ul><li> 尽量减少数据冗余</li><li>范式化的更新操作比反范式化更快</li><li>范式化的表通常比反范式更小</li></ul></li><li>缺点<ul><li>对于查询需要对多个表进行关联（mysql限制不能超过10张表）</li><li>更难进行索引优化</li></ul></li></ul></li><li>反范式化设计的优缺点<ul><li>优点<ul><li>减少表的关联</li><li>更好的进行索引优化</li></ul></li><li>缺点<ul><li> 存在数据冗余及数据库维护异常</li><li>对数据修改需要更多的成本</li></ul></li></ul></li></ul><blockquote><p> 设计范式化要求的三范式：<br> 第一范式</p></blockquote><ul><li>数据库表中的所有字段都只具有单一属性</li><li>单一属性的列是由基本的数据类型所构成的</li><li>设计及出来的表都是简单的二维表<br>第二范式</li><li>要求一个表中只具有一个业务主键，也就是说符合第二范式的表中不能存在非主键列对只对部分主键的依赖关系<br>第三范式</li><li> 数据不能存在传递关系，即每个属性都跟主键有直接关系而不是间接关系</li></ul><hr><p>##物理设计</p><ul><li><p>物理设计的内容</p><ul><li>定义数据库、表及字段的命名规范</li><li>选择合适的存储引擎</li><li>为表中的字段选择合适的数据类型</li><li>建立数据库结构 </li></ul></li><li><p>定义数据库、表及字段的命名规范</p><ul><li>可读性原则</li><li>表意行原则</li><li>长名原则</li></ul></li><li><p>选择合适的存储引擎</p><table><thead><tr><th>存储引擎</th><th>事务</th><th>锁粒度</th><th>主要应用</th><th>忌用</th></tr></thead><tbody><tr><td>MyISAM</td><td>不支持</td><td>支持并发插入的表级锁</td><td>SELECT、INSERT</td><td>读写操作频繁</td></tr><tr><td>MRG_MYISAM</td><td>不支持</td><td>支持并发插入的表级锁</td><td>分段归档，数据仓库</td><td>全局查找过多的场景</td></tr><tr><td>Innodb</td><td>支持</td><td>支持MVCC的行级锁</td><td>事务处理</td><td>无</td></tr><tr><td>Archive</td><td>不支持</td><td>行级锁</td><td>日志记录，只支持insert，select</td><td>需要随机读取，更新，删除</td></tr><tr><td>Ndb cluster</td><td>支持</td><td>行级锁</td><td>高可用性</td><td>大部分应用</td></tr></tbody></table></li></ul><hr><ul><li>为表中的字段选择合适的数据类型（数据页）<ul><li>当一个列可以选择多种数据类型时，应该优先考虑数字类型，其次是日期或二进制类型，最后是字符类型。对于相同级别的数据类型，应该优先选择占用空间小的数据类型</li></ul></li><li>如何为Innodb选择主键<ul><li>主键应该尽可能的小</li><li>主键应该是顺序增长的</li><li>Innodb的主键和业务主键可以不同；</li></ul></li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;设计好处&quot;&gt;&lt;a href=&quot;#设计好处&quot; class=&quot;headerlink&quot; title=&quot;设计好处&quot;&gt;&lt;/a&gt;设计好处&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;良好的数据库逻辑设计和物理设计师数据库获得高性能的基础&lt;/li&gt;
&lt;li&gt;范式化设计和反范式化设计（减少冗余、减</summary>
      
    
    
    
    <category term="后端" scheme="http://www.haleyl.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="mysql" scheme="http://www.haleyl.com/categories/%E5%90%8E%E7%AB%AF/mysql/"/>
    
    
    <category term="mysql" scheme="http://www.haleyl.com/tags/mysql/"/>
    
    <category term="优化" scheme="http://www.haleyl.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据库优化之实例和故事</title>
    <link href="http://www.haleyl.com/2017/03/02/mysql/mysql-eg/"/>
    <id>http://www.haleyl.com/2017/03/02/mysql/mysql-eg/</id>
    <published>2017-03-02T01:24:35.000Z</published>
    <updated>2020-11-04T06:30:49.515Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简要：每一项技术都离不开数据库，数据库犹如人的大脑；密不可分，一旦出了问题（故障），停顿，卡主后果可想而知；潜心学习数据库优化3个月，现在将学到的经验分享给大家，希望能够跟各位PHP大神分享和学习探索，如果有不对或者好的建议告知下；*~*！</p></blockquote><h2 id="合理时间备份数据"><a href="#合理时间备份数据" class="headerlink" title="合理时间备份数据"></a>合理时间备份数据</h2><blockquote><p>备份数据，是每个项目维护的日常工作；有利于数据在系统遭受破坏或其他特定情况下,重新加以利用的一个过程；项目的备份时间，大都是根据项目需求来决定，比如：每小时，指定时间等；　</p></blockquote><p>　<strong>案例:</strong>   某个项目正进行大型活动，数据库由于巨大用户量的访问以及定时备份；造成带宽出现峰值，大量执行操作处于队列状态，致使数据库停止工作；</p><p>　<strong>方法：</strong></p><ol><li>若拓扑结构单一结构（单台数据库），停止定时任务（备份）；</li><li>若拓扑结构非单一结构（主从/分布式），可停止定时任务；或主（数据库）放弃执行定时任务，从（数据库）执行；</li></ol><p>###二、避免对大表操作</p><blockquote><p>何谓大表，是指记录行数巨大，单标超过千万行；表数据文件巨大，表数据文件超过10G；</p></blockquote><p><strong>（1） 慢查询</strong><br>很难在一定时间内过滤出所需要的数据，原因：来源少-&gt;区分度低-&gt;大量磁盘IO-&gt;降低磁盘效率-&gt;大量慢查询</p><p> <strong>（2）大表对DDL操作</strong></p><p>　- 建立索引需要很长的时间，过程可能会造成：主从延迟、锁表甚至于造成死锁</p><p>　- 修改表结构需要长时间锁表，过程可能会造成：主从延迟，锁表，阻塞</p><p><strong>方法：</strong><br>　1. 分库分表<br>　2. 数据归档：减少前后端业务影响</p><h2 id="大事务"><a href="#大事务" class="headerlink" title="大事务"></a>大事务</h2><blockquote><p>大事务，运行时间比较长，操作的数据比较多的事务</p></blockquote><p><strong>（1）风险</strong></p><ul><li> 锁定太多数据，造成大量的阻塞</li><li> 回滚时间比较长</li><li> 执行时间长，容易造成主从延迟</li></ul><p><strong>（2）方法</strong></p><ul><li> 避免一次处理太多的数据（增删改查）</li><li> 移除不必要在事务中的select操作</li></ul><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简要：每一项技术都离不开数据库，数据库犹如人的大脑；密不可分，一旦出了问题（故障），停顿，卡主后果可想而知；潜心学习数据库优化3个月，现在将学到的经验分享给大家，希望能够跟各位PHP大神分享和学习探索，如果有不对或者好的建议告知下；*~*！&lt;/p&gt;</summary>
      
    
    
    
    <category term="后端" scheme="http://www.haleyl.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="mysql" scheme="http://www.haleyl.com/categories/%E5%90%8E%E7%AB%AF/mysql/"/>
    
    
    <category term="mysql" scheme="http://www.haleyl.com/tags/mysql/"/>
    
    <category term="优化" scheme="http://www.haleyl.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据库优化之什么影响性能</title>
    <link href="http://www.haleyl.com/2017/02/10/mysql/mysql-performance/"/>
    <id>http://www.haleyl.com/2017/02/10/mysql/mysql-performance/</id>
    <published>2017-02-10T15:24:35.000Z</published>
    <updated>2020-11-04T06:31:13.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="影响性能的几个方面"><a href="#影响性能的几个方面" class="headerlink" title="影响性能的几个方面"></a>影响性能的几个方面</h1><ul><li><strong>服务器</strong><ul><li>硬件</li><li>系统 </li></ul></li><li><strong>数据库</strong><ul><li>数据库存储引擎的选择（插件式存储引擎） </li><li>数据库参数配置（影响远远大于前面几个影响）</li><li>数据库结构设计和SQL语句<br>等级| 特点 | 是否冗余 | 盘数 | 读 | 写</li></ul></li><li>–|—|—|—|—|—|<br>RAID0 | 便宜,快速,危险 | 否 | N | 快 | 快|<br>RAID1 | 高速读,简单,安全| 有 | 2 | 快 | 慢|<br>RAID5 | 安全,成本折中| 有 | N+1 | 快 |取决于最慢的盘|<br>RAID10| 贵,高速,安全| 有 | 2N | 快 | 快|</li></ul><hr><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul><li>服务器硬件<ul><li>CPU密集型-不支持多CPU对同一SQL并发处理</li><li>并发量</li><li>内存</li><li>RAID增加传统集齐硬盘的性能</li></ul></li></ul><blockquote><pre><code>- 总结-  CPU    - 64位的CPU一定要工作在64位的系统下    - 对于并发比较高的场景CPU的数量比频率重要    - 对于CPU密集性场景和复杂SQL则频率越高越好- 内存    - 选择主板所能适用的最高频率的内存    - 内存的大小对性能很重要，所以尽可能的大- I/O子系统    - PCIe -&gt; SSD -&gt; Raid10 -&gt; 磁盘 -&gt; SAN</code></pre></blockquote><ul><li>服务器系统<ul><li>MySQL适合的操作系统<ul><li>Windows</li><li>FreeBSD</li><li>Solaris</li><li>Linux</li><li>CentOS</li></ul></li><li>文件系统对性能的影响<ul><li>Windows<ul><li>FAT</li><li>NTFS</li></ul></li><li>Linux<ul><li>EXT3</li><li>EXT4</li><li>XFS</li></ul></li></ul></li></ul></li></ul><p>##数据库<br>     - 插件式存储引擎<br>         - Mysiam<br>         - Innodb<br>     - 影响性能原因<br>         - 过分的反范式的设计表<br>         - 过分的范式化造成太多表关联（最多10）<br>         - 在OLTP环境下使用不恰当的分区表<br>         - 使用外键保证数据的完整性</p><h2 id="性能优化顺序"><a href="#性能优化顺序" class="headerlink" title="性能优化顺序"></a>性能优化顺序</h2><ul><li>数据库结构设计和SQL语句</li><li>数据库存储引擎的选择和参数配置</li><li>系统选择及优化</li><li>硬件升级</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;影响性能的几个方面&quot;&gt;&lt;a href=&quot;#影响性能的几个方面&quot; class=&quot;headerlink&quot; title=&quot;影响性能的几个方面&quot;&gt;&lt;/a&gt;影响性能的几个方面&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务器&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;硬件&lt;/li&gt;</summary>
      
    
    
    
    <category term="后端" scheme="http://www.haleyl.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="mysql" scheme="http://www.haleyl.com/categories/%E5%90%8E%E7%AB%AF/mysql/"/>
    
    
    <category term="mysql" scheme="http://www.haleyl.com/tags/mysql/"/>
    
    <category term="优化" scheme="http://www.haleyl.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 从零开始--生产部署</title>
    <link href="http://www.haleyl.com/2017/01/28/vue/vue-build/"/>
    <id>http://www.haleyl.com/2017/01/28/vue/vue-build/</id>
    <published>2017-01-28T06:13:05.000Z</published>
    <updated>2020-11-04T06:21:14.403Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简要：继上次搭建vue环境后，开始着手vue的学习;为此向大家分享从开发环境部署到生产环境（线上）中遇到的问题和解决办法，希望能够跟各位VUE大神学习探索，如果有不对或者好的建议告知下；*~*！</p></blockquote><hr><h2 id="如何打包，部署到生产环境（线上）"><a href="#如何打包，部署到生产环境（线上）" class="headerlink" title="如何打包，部署到生产环境（线上）"></a>如何打包，部署到生产环境（线上）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><strong>1. dist 文件结构（编译后，生成在vue目录下）</strong></p><blockquote><ul><li>static （存放css/js/image)</li></ul></blockquote><ul><li>index.html （编译后页面）</li></ul><p><strong>2. 部署生产环境（以Thinkphp为例）</strong></p><pre><code>（1） 建立子项目，创建控制器建立index方法；实例化模板；将编译后index.html存放在对应的视图下；（2） 修改vue配置文件（dist下status文件，默认存放在项目的根目录；若无须改变请忽略此步骤！）　　</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/d3cce7d9612b8235940a4b1567a490ca.png" alt="(index.html 文件目录)"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f381b620ef97f5957be78b0009006150.png" alt="（config文件static存在路径修改，配置文件路径：config\index.js）">    　</p><h2 id="不加载组件（非根目录）"><a href="#不加载组件（非根目录）" class="headerlink" title="不加载组件（非根目录）"></a>不加载组件（非根目录）</h2><p><strong>原因：路由path错误</strong>　<br><img src="https://img-blog.csdnimg.cn/img_convert/7700d31297e9651940cb25f68f6f64f2.png" alt="（路由配置图）"></p><h3 id="刷新页面（刷新路由）出现404"><a href="#刷新页面（刷新路由）出现404" class="headerlink" title="刷新页面（刷新路由）出现404"></a>刷新页面（刷新路由）出现404</h3><p><strong>1. 为什么</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue路由设置 HTML5 History 模式，直接访问&#x2F;刷新url会被http server直接解析到该文件路径（被相应的框架接管），但vue的路由是虚拟的（只是告知编译后index.html文件追寻到相应的路径），并不能直接找到这个file，所以会404；</span><br></pre></td></tr></table></figure><p><strong>2. 怎么做（针对nignx；具体参考：<a href="https://router.vuejs.org/zh-cn/essentials/history-mode.html">HTML5 History 模式</a>）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">　 root （index.html存在目录路径，比如：&#x2F;admin&#x2F;tpl&#x2F;index&#x2F;）</span><br><span class="line">  try_files $uri $uri&#x2F; &#x2F;index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">单配置此步骤，任意不存在页面（404）都会跳转到上述指定路径；详细解决办法请看下文；</span><br></pre></td></tr></table></figure><h2 id="任意不存在页面（404）都跳转到指定路径（针对解决404页面后）"><a href="#任意不存在页面（404）都跳转到指定路径（针对解决404页面后）" class="headerlink" title="任意不存在页面（404）都跳转到指定路径（针对解决404页面后）"></a>任意不存在页面（404）都跳转到指定路径（针对解决404页面后）</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/e9a7df9b8bf1b8646e4e146952f6b07d.png" alt="这里写图片描述"><br><strong>个人解决方法：制作404页面的组件；在routes.js配置，配置增加路由</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: &#39;*&#39;, component: defaults &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简要：继上次搭建vue环境后，开始着手vue的学习;为此向大家分享从开发环境部署到生产环境（线上）中遇到的问题和解决办法，希望能够跟各位VUE大神学习探索，如果有不对或者好的建议告知下；*~*！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2</summary>
      
    
    
    
    <category term="前端" scheme="http://www.haleyl.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="http://www.haleyl.com/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
    <category term="vue" scheme="http://www.haleyl.com/tags/vue/"/>
    
    <category term="js" scheme="http://www.haleyl.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Vue2.0 从零开始--搭建环境</title>
    <link href="http://www.haleyl.com/2017/01/01/vue/vue-init/"/>
    <id>http://www.haleyl.com/2017/01/01/vue/vue-init/</id>
    <published>2017-01-01T06:06:47.000Z</published>
    <updated>2020-11-04T06:10:43.449Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简要：继项目空闲后，开始着手vue的学习;为此向大家分享其中的艰辛和搭建办法，希望能够跟各位VUE大神学习探索，如果有不对或者好的建议告知下；*~*！</p></blockquote><h2 id="什么是VUE？"><a href="#什么是VUE？" class="headerlink" title="什么是VUE？"></a>什么是VUE？</h2><p>是一种node.js框架，特点如下:</p><pre><code>1.数据绑定 （特性：双向绑定；一旦发生变化，Dom节点实时更新；PS:尽量抛弃JQ，次特点已经可以解决很多特效等问题）2.组件化（比如：乐高积木一样通过互相引用而组装起来）</code></pre><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/d8161879410af79f57d34a4f320473ea.png" alt="这里写图片描述"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="1-包管理器安装"><a href="#1-包管理器安装" class="headerlink" title="1. 包管理器安装"></a>1. 包管理器安装</h3><p>（1）Homebrew安装 (mac 环境，win无法安装)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e&quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br></pre></td></tr></table></figure><p>（2） node.js安装（win下前往node.js官网安装即可）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nodejs  （mac 环境）</span><br></pre></td></tr></table></figure><h3 id="2-相关安装指令"><a href="#2-相关安装指令" class="headerlink" title="2. 相关安装指令"></a>2. 相关安装指令</h3><p>（1） 淘宝镜像（当npm下载相关扩展超时，最为快捷）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org  &#x2F;&#x2F; 注册淘宝镜像 npm替换成cnpm使用即可</span><br></pre></td></tr></table></figure><p>（2） 安装webpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm&#x2F;npm install webpack -g</span><br></pre></td></tr></table></figure><p>（3） 安装vue脚手架</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm&#x2F;npm install vue-cli -g</span><br></pre></td></tr></table></figure><p>（4） 初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack 项目名字</span><br></pre></td></tr></table></figure><p>（5） 安装项目依赖 （添加依赖或者删除时，须重新安装）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>（6） 运行开发环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>（6） 运行运营环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>以上就是我的分享，如果我的这篇文章解决了你的问题，麻烦你点个赞让更多同样情况的朋友，能更快的解决问题！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简要：继项目空闲后，开始着手vue的学习;为此向大家分享其中的艰辛和搭建办法，希望能够跟各位VUE大神学习探索，如果有不对或者好的建议告知下；*~*！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是VUE？&quot;&gt;&lt;a href=&quot;#什么是</summary>
      
    
    
    
    <category term="前端" scheme="http://www.haleyl.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="http://www.haleyl.com/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
    <category term="vue" scheme="http://www.haleyl.com/tags/vue/"/>
    
    <category term="js" scheme="http://www.haleyl.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>php7+apache2.4+mysql 环境配置(window环境)</title>
    <link href="http://www.haleyl.com/2016/12/03/php/php-setting/"/>
    <id>http://www.haleyl.com/2016/12/03/php/php-setting/</id>
    <published>2016-12-03T08:20:37.000Z</published>
    <updated>2020-11-04T06:08:22.895Z</updated>
    
    <content type="html"><![CDATA[<p>简要：最近，小主从事PHP开发。特将最近如何搭建php7的过程记录在此！希望有需要，可以借鉴！( 电脑必须win7 sp1以上， .netframework4 ) Windows7安装php7，Win7+php7+apache2.4，成功启动。</p><h3 id="下载php7、apache2-4、mysql"><a href="#下载php7、apache2-4、mysql" class="headerlink" title="下载php7、apache2.4、mysql"></a>下载php7、apache2.4、mysql</h3><pre><code>首先下载php7的windows压缩包，到这里下载http://windows.php.net/download/。对应版本：Php7  VC14 x86 Thread Safe  </code></pre><p>　　我选择的是php7的这个版本，由于它是vc14编译的，这意味着需要安装vc2015(即vc14)运行时环境，同时需要Apache2.4才可以运行php7 。</p><ul><li><p>vc2015到这里下载：<a href="http://www.microsoft.com/zh-cn/download/details.aspx?id=48145">http://www.microsoft.com/zh-cn/download/details.aspx?id=48145</a>  运行安装。</p><p> 需要注意，安装vc14必须开启这3个服务，否则一定会安装失败：</p></li><li><p> apache2.4到这里下载：Apache 2.4.17 Win32  <a href="http://www.apachelounge.com/download/">http://www.apachelounge.com/download/</a> 对应版本号：httpd-2.4.17-win32-VC14.zip    </p></li><li><p> mysql  <a href="https://pan.baidu.com/s/1bo5Or63%EF%BC%88%E6%8E%A8%E8%8D%90%E5%AE%89%E8%A3%85%E6%AD%A4%E7%89%88%E6%9C%AC%EF%BC%8C%E5%85%B6%E4%BB%96%E7%89%88%E6%9C%ACmysql%E4%BC%9A%E5%87%BA%E7%8E%B0%E6%97%A0%E6%B3%95%E5%85%B3%E9%97%AD%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E8%A7%86%E5%9B%BE%E7%95%8C%E9%9D%A2%E5%8D%B3%E8%A3%85%E5%8D%B3%E7%94%A8%EF%BC%9B%EF%BC%89">https://pan.baidu.com/s/1bo5Or63（推荐安装此版本，其他版本mysql会出现无法关闭的情况，视图界面即装即用；）</a></p></li><li><p> 将php7的windows压缩包、Apache2.4解压，如我的路径是：</p></li></ul><blockquote><p>D:\Server\Apache24<br>  D:\Server\Php<br>　D:\Server\Mysql<br>  D:\Server\WWW   (存放php网站脚本的目录，DocumentRoot.)</p></blockquote><h3 id="配置httpd-conf和php-ini-："><a href="#配置httpd-conf和php-ini-：" class="headerlink" title="配置httpd.conf和php.ini ："></a>配置httpd.conf和php.ini ：</h3><h4 id="打开apache24-conf-httpd-conf"><a href="#打开apache24-conf-httpd-conf" class="headerlink" title="打开apache24/conf/httpd.conf"></a>打开apache24/conf/httpd.conf</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修改：ServerRoot &quot;D:&#x2F;Server&#x2F;Apache24&quot;</span><br><span class="line">修改：DocumentRoot &quot;D:&#x2F;Server&#x2F;WWW&#x2F; &quot;</span><br><span class="line">添加 ：（注意phpIniDir项在上面） php7对apache的处理接口</span><br><span class="line"></span><br><span class="line">PHPIniDir &quot;D:&#x2F;Server&#x2F;Php&quot;</span><br><span class="line">AddType application&#x2F;x-httpd-php .php .html .htm</span><br><span class="line">LoadModule php7_module &quot;D:&#x2F;Server&#x2F;Php&#x2F;php7apache2_4.dll&quot;</span><br></pre></td></tr></table></figure><h4 id="配置php-ini。-打开php目录，复制1个php-ini-development-，修改为php-ini。"><a href="#配置php-ini。-打开php目录，复制1个php-ini-development-，修改为php-ini。" class="headerlink" title="配置php.ini。 打开php目录，复制1个php.ini-development ，修改为php.ini。"></a>配置php.ini。 打开php目录，复制1个php.ini-development ，修改为php.ini。</h4><p>   打开php.ini， 找到 ;extension_dir = “D:/Server/Php/ext”  ，把前面的分号去掉。</p><p>　（必须指定扩展路径，否则php7启动不了。一般开启ext扩展目录之后，就可以成功在命令行启动php7，如果仍然不成功，说明你的php路径没有添加到 环境变量中（或者你的环境变量有旧的php版本使用））</p><h3 id="把apache24加入windows服务，并启动apache："><a href="#把apache24加入windows服务，并启动apache：" class="headerlink" title="把apache24加入windows服务，并启动apache："></a>把apache24加入windows服务，并启动apache：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cmd命令行，进入d盘，然后打开目录，运行httpd  –k install</span><br><span class="line">D:</span><br><span class="line">Cd   D:\Server\Apache24\bin</span><br><span class="line">httpd  –k install</span><br><span class="line">　httpd  –k start</span><br></pre></td></tr></table></figure><p>　　　　<br>这样，apache和php7就启动了。</p><p>在 D:/web/www/ 创建1个phpinfo.php文件</p><p>访问：<a href="http://127.0.0.1/phpinfo.php">http://127.0.0.1/phpinfo.php</a>  实际运行结果。如果你有问题，咨询QQ群 866437035 给你答案。  </p><p>（另外提供了1个php7集成环境打包： <a href="http://pan.baidu.com/s/1qXwjpF2">http://pan.baidu.com/s/1qXwjpF2</a>  ，注意：一旦自己搭建后，就尽量不要安装集成环境；会早成一定的冲突！）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简要：最近，小主从事PHP开发。特将最近如何搭建php7的过程记录在此！希望有需要，可以借鉴！( 电脑必须win7 sp1以上， .netframework4 ) Windows7安装php7，Win7+php7+apache2.4，成功启动。&lt;/p&gt;
&lt;h3 id=&quot;下载</summary>
      
    
    
    
    <category term="后端" scheme="http://www.haleyl.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="php" scheme="http://www.haleyl.com/categories/%E5%90%8E%E7%AB%AF/php/"/>
    
    
    <category term="mysql" scheme="http://www.haleyl.com/tags/mysql/"/>
    
    <category term="php" scheme="http://www.haleyl.com/tags/php/"/>
    
    <category term="apache" scheme="http://www.haleyl.com/tags/apache/"/>
    
    <category term="window" scheme="http://www.haleyl.com/tags/window/"/>
    
  </entry>
  
  <entry>
    <title>app与php后台接口登录验证（seesion和token）</title>
    <link href="http://www.haleyl.com/2016/11/03/php/token/"/>
    <id>http://www.haleyl.com/2016/11/03/php/token/</id>
    <published>2016-11-03T06:11:10.000Z</published>
    <updated>2020-11-04T06:08:22.897Z</updated>
    
    <content type="html"><![CDATA[<p>简要：随着电商的不断发展，APP也层次不穷，随着科技的发展主要登录形式（微信、QQ、账号/密码）；为此向大家分享一下”app与php后台接口登录认证、验证”想法和做法；希望能够帮助困惑的伙伴们，如果有不对或者好的建议告知下；*~*！</p><h3 id="登录机制"><a href="#登录机制" class="headerlink" title="登录机制"></a>登录机制</h3><p>粗略分析：登录可分为三个阶段（登录验证、登录持续、退出登录）；登录验证指客户端提供账号/密码（或第三方平台（微信、qq）获取openid/unionid）向服务器提出登录请求，服务器应答请求判断能否登录并返回相应数据；登录持续指客户端登录后， 服务器能够分辨出已登录的客户端，并为其持续提供登录权限的服务器。退出登录指客户端退出登录状态。</p><p>方案，客户端登录成功后， 服务器为其分配seesionId和token, 客户端每次请求资源时都带上sessionId和token验证，当sessionId失效带上token重新获取sessionId从而获取相应资源；</p><h4 id="登录状态seesionId"><a href="#登录状态seesionId" class="headerlink" title="登录状态seesionId"></a>登录状态seesionId</h4><p>登录状态指，客户端登录情况（登录中，未登录）；简单登录流程如下：</p><p>1 、客户端向服务器第一次发起登录请求（不传输用户名和密码）。</p><p>2、服务器利用RSA算法产生一对公钥和私钥。并保留私钥， 将公钥发送给客户端。</p><p>3、客户端收到公钥后， 加密用户密码， 向服务器发起第二次登录请求（传输用户名和加密后的密码）。</p><p>4、服务器利用保留的私钥对密文进行解密，得到真正的密码。</p><p>登录成功后，服务器在session中分配一个Id记录客户端访问状态；</p><h4 id="身份验证token"><a href="#身份验证token" class="headerlink" title="身份验证token"></a>身份验证token</h4><p>token就是令牌，最大的特点就是随机性，不可预测；从上面流程可知，单单一个sessionId判断用户的登录状态及身份并不可取；为此需要token进行身份审核；并且token存活时间应比sessionId长；因为sessionId一旦实效，就可以通过token来保持登录状态；</p><h3 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h3><h4 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h4><p>app登录方式如开头所说，主流三种：微信、QQ、账号/密码；首次验证是通过数据的匹配；匹配成功服务器返回唯一的sessionId和token，防止用户信息的泄露；期间，建议token存活时间应比sessionId长；因为sessionId一旦实效，就可以通过token来维持登录状态；</p><h4 id="登录持续"><a href="#登录持续" class="headerlink" title="登录持续"></a>登录持续</h4><p>sessionId记录着客户端登录状态，保存在服务器session中；可想而知当session过了存活期时就会失效，通过token重新获取sessionId;保证登录状态的延续；</p><h4 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h4><p>sessionId注销；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简要：随着电商的不断发展，APP也层次不穷，随着科技的发展主要登录形式（微信、QQ、账号/密码）；为此向大家分享一下”app与php后台接口登录认证、验证”想法和做法；希望能够帮助困惑的伙伴们，如果有不对或者好的建议告知下；*~*！&lt;/p&gt;
&lt;h3 id=&quot;登录机制&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="后端" scheme="http://www.haleyl.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="php" scheme="http://www.haleyl.com/categories/%E5%90%8E%E7%AB%AF/php/"/>
    
    
    <category term="php" scheme="http://www.haleyl.com/tags/php/"/>
    
    <category term="session" scheme="http://www.haleyl.com/tags/session/"/>
    
    <category term="token" scheme="http://www.haleyl.com/tags/token/"/>
    
  </entry>
  
</feed>
